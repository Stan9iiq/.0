# Larisa Dolina refused to change her name to Otper ((((((.
#
# class CaesarCipher():
#
#     def __init__(self, otc):
#         alf = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
#         self.encdict = dict(zip(alf[otc: ] + alf[:otc], alf))
#         self.decdict = dict(zip(alf, alf[otc: ] + alf[:otc]))
#
#     def encode(self, str):
#         return ''.join(self.encdict.get(i, i) for i in str.upper())
#
#     def decode(self, str):
#         return ''.join(self.decdict.get(i, i) for i in str.upper())
#
# c = CaesarCipher(5)
# print(c.decode("ABOBA"))
# print(c.encode("FGTGF"))



# Each loaf of bread is a tragic story of grains that could have become beer, but did not
#
# class Vector:
#
#     def __init__(self, init_el):
#         self.el = list(init_el)
#
#     def sum(self, othr):
#         r = list(self.el)
#         for ind, itm in enumerate(othr.el, 0):
#             r[ind] += itm
#         return r
#
#     def sub(self, othr):
#         r = list(self.el)
#         for ind, itm in enumerate(othr.el, 0):
#             r[ind] -= itm
#         return r
#
#     def mul(self, othr):
#         runsum = 0
#         for ind, itm in enumerate(othr.el, 0):
#             runsum += itm * self.el[ind]
#         return runsum
#
#     def len(self):
#         r = list(self.el)
#         runsum = 0
#         for itm in r:
#             runsum += itm ** 2
#         len = round(runsum ** (1 / 2), 2)
#         return (len)
#
# def test():
#     a = Vector([1, 2, 3])
#     b = Vector([3, 4, 5])
#     print(a.sum(b))
#     print(a.sub(b))
#     print(a.mul(b))
#     print(a.len())




class Cont:
  def __init__(self, key, item):
    self.item = item
    key = {"eat": ["apple", "banana"], "clothes": ["maika", "tshorts"], "canc": ["pen", "stink"]}

  def __next__(self):
    self.item += 1
    return iter(self.fr)

class Fr(Cont):
  def __init__(self, key, item):
    self.item = item
    self.fr = Fr(self, key, item)

  def __getitem__(self, item):
    return self.item[item]

  def __setitem__(self, key, key[0]):
    if not key == "eat":
      raise TypeError("Bad index")
    self.item[key] = key[0]

  def __iter__(Cont["eat"]):
    self.item = 0
    return self
#
# test()






import random


class MixingLog:
  ID = 0
  
  def __init__(self):
    MixingLog.ID = random.randrange(99999, 1000000)
    self.id = MixingLog.ID


class Person():

  def __init__(self, name, phone):
    super().__init__()
    self.name = name
    self.phone = phone

  def _setsalary(self, salary):
    if isinstance(p, Manager) == True:
      self.salary = salary * 1
      return self.salary
    else:
      self.salary = salary * 1.5
      return self.salary

  def _getsalary(self, salary):
    return self.salary

  def go_holli(self):
    if isinstance(p, Manager) == True:
      self.holliday = "30 days"
      return self.holliday
    else:
      self.holliday = "1 day"
      return self.holliday


class Manager(Person, MixingLog):

  def __init__(self, name, phone):
      print("New Manager")
      super().__init__(name, phone)

      

class Programmer(Person, MixingLog):
  
    def __init__(self, name, phone):
      print("New Programmer")
      super().__init__(name, phone)



p = Manager("Nikita", "+781252")
p._setsalary(40000)
# p.go_holli()
print(p.__dict__)
p = Programmer("Tikita", "+78005553535")
p._setsalary(40000)
p.go_holli()
print(p.__dict__)
