# Larisa Dolina refused to change her name to Otper ((((((.
#
# class CaesarCipher():
#
#     def __init__(self, otc):
#         alf = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
#         self.encdict = dict(zip(alf[otc: ] + alf[:otc], alf))
#         self.decdict = dict(zip(alf, alf[otc: ] + alf[:otc]))
#
#     def encode(self, str):
#         return ''.join(self.encdict.get(i, i) for i in str.upper())
#
#     def decode(self, str):
#         return ''.join(self.decdict.get(i, i) for i in str.upper())
#
# c = CaesarCipher(5)
# print(c.decode("ABOBA"))
# print(c.encode("FGTGF"))



# Each loaf of bread is a tragic story of grains that could have become beer, but did not
#
# class Vector:
#
#     def __init__(self, init_el):
#         self.el = list(init_el)
#
#     def sum(self, othr):
#         r = list(self.el)
#         for ind, itm in enumerate(othr.el, 0):
#             r[ind] += itm
#         return r
#
#     def sub(self, othr):
#         r = list(self.el)
#         for ind, itm in enumerate(othr.el, 0):
#             r[ind] -= itm
#         return r
#
#     def mul(self, othr):
#         runsum = 0
#         for ind, itm in enumerate(othr.el, 0):
#             runsum += itm * self.el[ind]
#         return runsum
#
#     def len(self):
#         r = list(self.el)
#         runsum = 0
#         for itm in r:
#             runsum += itm ** 2
#         len = round(runsum ** (1 / 2), 2)
#         return (len)
#
# def test():
#     a = Vector([1, 2, 3])
#     b = Vector([3, 4, 5])
#     print(a.sum(b))
#     print(a.sub(b))
#     print(a.mul(b))
#     print(a.len())




class Cont:
  def __init__(self, key, item):
    self.item = item
    key = {"eat": ["apple", "banana"], "clothes": ["maika", "tshorts"], "canc": ["pen", "stink"]}

  def __next__(self):
    self.item += 1
    return iter(self.fr)

class Fr(Cont):
  def __init__(self, key, item):
    self.item = item
    self.fr = Fr(self, key, item)

  def __getitem__(self, item):
    return self.item[item]

  def __setitem__(self, key, key[0]):
    if not key == "eat":
      raise TypeError("Bad index")
    self.item[key] = key[0]

  def __iter__(Cont["eat"]):
    self.item = 0
    return self
#
# test()








import random


class MixingLog:
  ID = 0
  
  def __init__(self):
    MixingLog.ID = random.randrange(99999, 1000000)
    self.id = MixingLog.ID


class Person:

  def __init__(self, name, phone):
    super().__init__()
    self.name = name
    self.phone = phone

  def go_holliday(self, hollidays):
    try:
      self.hollidays = int(hollidays)
    except ValueError:
      print("Без выходных, пока не выучит цифры")
      self.hollidays = "Сиди, думай"
      return self.hollidays


class Manager(Person, MixingLog):

  def __init__(self, name, phone):
    super().__init__(name, phone)
    print(f"New Manager - {self.name}")

  def _setsalary(self, __salary):
    try:
      self.salary = int(__salary) * 1
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.salary = int(self.salary - (self.salary * 0.025 * self.hollidays))
    except ValueError:
      return self.salary
    except AttributeError:
      return self.salary


class Programmer(Person, MixingLog):

  def __init__(self, name, phone):
    super().__init__(name, phone)
    print(f"New Programmer - {self.name}")

  def _setsalary(self, __salary):
    try:
      self.salary = int(__salary) * 1.4
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.salary = int(self.salary - (self.salary * 0.027 * self.hollidays))
    except ValueError:
      return self.salary
    except AttributeError:
      return self.salary



p1 = Manager("Nikita", "+7952812")
p1.go_holliday(5)
# p1._setsalary(40000)
# print(p1.__dict__)

p2 = Programmer("Tikita", "+78005553535")
p2.go_holliday("5")
# p2._setsalary("40000")
# print(p2.__dict__)

p3 = Manager("Kikita", "+71337420")
p3.go_holliday("abc")
# p3._setsalary(40000)
# print(p3.__dict__)

p4 = Manager("Mikita", "+712345689")
p4.go_holliday(5)
# p4._setsalary("abc")
# print(p4.__dict__)

staff = [p1, p2, p3, p4]
for p in staff:
  p._setsalary(40000)

print(p1.__dict__)
print(p2.__dict__)
print(p3.__dict__)
print(p4.__dict__)








import random


class MixingLog:
  ID = 0
  
  def __init__(self):
    MixingLog.ID = random.randrange(99999, 1000000)
    self.id = MixingLog.ID


class Person:

  def __init__(self, name, phone, salary):
    super().__init__()
    self.name = name
    self.phone = phone
    self.salary = salary

  def go_holliday(self, hollidays):
    try:
      self.hollidays = int(hollidays)
    except ValueError:
      print("Без выходных, пока не выучит цифры")
      self.hollidays = "Сиди, думай"
      return self.hollidays


class Manager(Person, MixingLog):

  def __init__(self, name, phone, salary):
    super().__init__(name, phone, salary)
    print(f"New Manager - {self.name}")

  @property
  def salary(self):
    return self.__salary

  @salary.setter
  def salary(self, salary):
    try:
      self.__salary = int(salary) * 1
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.__salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.__salary = int(self.salary - (self.salary * 0.025 * self.hollidays))
    except ValueError:
      return int(self.__salary)
    except AttributeError:
      return int(self.__salary)


class Programmer(Person, MixingLog):

  def __init__(self, name, phone, salary):
    super().__init__(name, phone, salary)
    print(f"New Programmer - {self.name}")

  @property
  def salary(self):
    return self.__salary

  @salary.setter
  def salary(self, salary):
    try:
      self.__salary = int(int(salary) * 1.4)
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.__salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.__salary = int(self.salary - (self.salary * 0.027 * self.hollidays))
    except ValueError:
      return int(self.__salary)
    except AttributeError:
      return int(self.__salary)



p1 = Manager("Nikita", "+7952812", 0)
p1.go_holliday(6)
# p1.salary = 40000
# print(p1.__dict__)

p2 = Programmer("Tikita", "+78005553535", 0)
p2.go_holliday("7")
# p2.salary = "40000"
# print(p2.__dict__)

p3 = Manager("Kikita", "+71337420", 0)
p3.go_holliday("abc")
# p3.salary = 40000
# print(p3.__dict__)

p4 = Programmer("Mikita", "+712345689", 0)
p4.go_holliday(5)
p4.salary = "abc"
# print(p4.__dict__)

p5 = Manager("Zikita", "+798654321", 0)
# p4.salary = 40000
# print(p4.__dict__)

staff = [p1, p2, p3, p5]
for p in staff:
  p.salary = 40000

print(p1.__dict__)
print(p2.__dict__)
print(p3.__dict__)
print(p4.__dict__)
print(p5.__dict__)



import random


class MixingLog:
  ID = 0
  
  def __init__(self):
    MixingLog.ID = random.randrange(99999, 1000000)
    self.id = MixingLog.ID


class Person:
  __slots__ = ("name", "phone", "salary")
  def __init__(self, name, phone, salary):
    super().__init__()
    self.name = name
    self.phone = phone
    self.salary = salary

  def go_holliday(self, hollidays):
    try:
      self.hollidays = int(hollidays)
    except ValueError:
      print("Без выходных, пока не выучит цифры")
      self.hollidays = "Сиди, думай"
      return self.hollidays


class Manager(Person, MixingLog):

  def __init__(self, name, phone, salary):
    super().__init__(name, phone, salary)
    print(f"New Manager - {self.name}")

  @property
  def salary(self):
    return self.__salary

  @salary.setter
  def salary(self, salary):
    try:
      self.__salary = int(salary) * 1
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.__salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.__salary = int(self.salary - (self.salary * 0.025 * self.hollidays))
    except ValueError:
      return int(self.__salary)
    except AttributeError:
      return int(self.__salary)


class Programmer(Person, MixingLog):

  def __init__(self, name, phone, salary):
    super().__init__(name, phone, salary)
    print(f"New Programmer - {self.name}")

  @property
  def salary(self):
    return self.__salary

  @salary.setter
  def salary(self, salary):
    try:
      self.__salary = int(int(salary) * 1.4)
    except ValueError:
      print("Тебе чем платить то, бананами, яблоками...?")
      self.__salary = 0
    try:
      self.hollidays = int(self.hollidays)
      self.__salary = int(self.salary - (self.salary * 0.027 * self.hollidays))
    except ValueError:
      return int(self.__salary)
    except AttributeError:
      return int(self.__salary)



p1 = Manager("Nikita", "+7952812", 0)
p1.go_holliday(6)
# p1.salary = 40000
# print(p1.__dict__)

p2 = Programmer("Tikita", "+78005553535", 0)
p2.go_holliday("7")
# p2.salary = "40000"
# print(p2.__dict__)

p3 = Manager("Kikita", "+71337420", 0)
p3.go_holliday("abc")
# p3.salary = 40000
# print(p3.__dict__)

p4 = Programmer("Mikita", "+712345689", 0)
p4.go_holliday(5)
p4.salary = "abc"
# print(p4.__dict__)

p5 = Manager("Zikita", "+798654321", 0)
# p4.salary = 40000
# print(p4.__dict__)

staff = [p1, p2, p3, p5]
for p in staff:
  p.salary = 40000

print(p1.name, p1.phone, p1.__dict__)
print(p2.name, p2.phone, p1.__dict__)
print(p3.name, p3.phone, p1.__dict__)
print(p4.name, p4.phone, p1.__dict__)
print(p5.name, p5.phone, p1.__dict__)
